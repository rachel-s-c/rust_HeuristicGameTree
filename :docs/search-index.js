var N = null;var searchIndex = {};
searchIndex["heuristic_game_tree"]={"doc":"","items":[[0,"checkers","heuristic_game_tree","",N,N],[4,"Piece","heuristic_game_tree::checkers","",N,N],[13,"X","","",0,N],[13,"O","","",0,N],[13,"XKing","","",0,N],[13,"OKing","","",0,N],[5,"print_piece","","",N,[[["option"]],["str"]]],[5,"start_checkers","","Starts the Checkers game",N,[[["usize"]]]],[11,"is_o","","",0,[[["self"]],["bool"]]],[11,"is_x","","",0,[[["self"]],["bool"]]],[11,"is_king","","",0,[[["self"]],["bool"]]],[0,"connect4","heuristic_game_tree","",N,N],[5,"start_con","heuristic_game_tree::connect4","Starts the Connect4 game",N,[[["usize"]]]],[0,"general_game","heuristic_game_tree","",N,N],[4,"Piece","heuristic_game_tree::general_game","Game pieces for a two-player game where all the pieces…",N,N],[13,"X","","An 'X' piece",1,N],[13,"O","","An 'O' piece",1,N],[5,"lets_play","","Starts the game after the player runs the program with the…",N,[[["usize"],["usize"]]]],[5,"print_piece","","Prints the game piece on the game board.",N,[[["option",["piece"]]],["str"]]],[0,"tictactoe","heuristic_game_tree","",N,N],[5,"start_tic","heuristic_game_tree::tictactoe","Starts the Tic-tac-toe game",N,[[["usize"]]]],[0,"minimax","heuristic_game_tree","",N,N],[5,"minimax_search","heuristic_game_tree::minimax","Function: Minimax with alpha-beta pruning. Minimax is a…",N,[[["g"],["usize"],["bool"]],["option"]]],[8,"HeuristicGameTree","heuristic_game_tree","A trait for the ability to make a game tree of possible…",N,N],[16,"Move","","",2,N],[10,"possible_moves","","All the possible moves that the computer agent and player…",2,[[["self"]],["box",["iterator"]]]],[10,"heuristic","","The computation of heuristics differ with the type of game…",2,[[["self"]],["isize"]]],[10,"execute_move","","After determining the best move to make, the computer…",2,N],[11,"into","heuristic_game_tree::checkers","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","heuristic_game_tree::general_game","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"eq","","",1,[[["self"],["piece"]],["bool"]]],[11,"clone","heuristic_game_tree::checkers","",0,[[["self"]],["piece"]]],[11,"clone","heuristic_game_tree::general_game","",1,[[["self"]],["piece"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Piece"],[4,"Piece"],[8,"HeuristicGameTree"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
